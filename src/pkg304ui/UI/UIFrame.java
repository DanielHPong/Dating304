/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg304ui.UI;

import facadeUI.LogInManager;
import facadeUI.UserManager;
import facadeUI.Viewer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JOptionPane;
import pkg304data.PremiumPackage;
import pkg304ui.UIUpdater;

/**
 *
 * @author Daniel LÃª
 */
public class UIFrame extends javax.swing.JFrame {

    /**
     * Creates new form UIMain
     */
    public UIFrame() {
        initComponents();
        LogoutButton.setEnabled(false);
        getMessagesButton.setEnabled(false);
        sendMessageButton.setEnabled(false);
        sendMessageTextField.setEnabled(false);
        buyPremiumButton.setEnabled(false);
        cancelPremiumButton.setEnabled(false);
        addPaymentInfoButton.setEnabled(false);
        getImageButton.setEnabled(false);
        uploadImageButton.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LeftPanel = new javax.swing.JPanel();
        PickUserButton = new javax.swing.JButton();
        currentUserStaticLabel = new javax.swing.JLabel();
        currentUserDynamicLabel = new javax.swing.JLabel();
        matchesDropdown = new javax.swing.JComboBox<>();
        matchesStaticLabel = new javax.swing.JLabel();
        errorDynamicLabel = new javax.swing.JLabel();
        LogoutButton = new javax.swing.JButton();
        getMessagesButton = new javax.swing.JButton();
        sendMessageButton = new javax.swing.JButton();
        sendMessageTextField = new javax.swing.JTextField();
        buyPremiumButton = new javax.swing.JButton();
        cancelPremiumButton = new javax.swing.JButton();
        addPaymentInfoButton = new javax.swing.JButton();
        getImageButton = new javax.swing.JButton();
        uploadImageButton = new javax.swing.JButton();
        deleteImageButton = new javax.swing.JButton();
        RightPanel = new javax.swing.JPanel();
        RightScroll = new javax.swing.JScrollPane();
        RightText = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("UIFrame"); // NOI18N
        setResizable(false);

        LeftPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        LeftPanel.setPreferredSize(new java.awt.Dimension(489, 744));

        PickUserButton.setText("Pick User");
        PickUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PickUserButtonActionPerformed(evt);
            }
        });

        currentUserStaticLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        currentUserStaticLabel.setText("Current User: ");

        currentUserDynamicLabel.setMaximumSize(new java.awt.Dimension(25, 199));
        currentUserDynamicLabel.setMinimumSize(new java.awt.Dimension(25, 199));
        currentUserDynamicLabel.setPreferredSize(new java.awt.Dimension(25, 199));

        matchesStaticLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        matchesStaticLabel.setText("Matches");

        errorDynamicLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        errorDynamicLabel.setForeground(new java.awt.Color(222, 0, 0));

        LogoutButton.setText("Logout");
        LogoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutButtonActionPerformed(evt);
            }
        });

        getMessagesButton.setText("Get Messages");
        getMessagesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getMessagesButtonActionPerformed(evt);
            }
        });

        sendMessageButton.setText("Send Message");
        sendMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMessageButtonActionPerformed(evt);
            }
        });

        buyPremiumButton.setText("Buy Premium");
        buyPremiumButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyPremiumButtonActionPerformed(evt);
            }
        });

        cancelPremiumButton.setText("Cancel Premium");
        cancelPremiumButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelPremiumButtonActionPerformed(evt);
            }
        });

        addPaymentInfoButton.setText("Add Payment Info");
        addPaymentInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPaymentInfoButtonActionPerformed(evt);
            }
        });

        getImageButton.setText("Get Image");
        getImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getImageButtonActionPerformed(evt);
            }
        });

        uploadImageButton.setText("Upload Image");
        uploadImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadImageButtonActionPerformed(evt);
            }
        });

        deleteImageButton.setText("Delete Image");
        deleteImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteImageButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LeftPanelLayout = new javax.swing.GroupLayout(LeftPanel);
        LeftPanel.setLayout(LeftPanelLayout);
        LeftPanelLayout.setHorizontalGroup(
            LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LeftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addPaymentInfoButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(LeftPanelLayout.createSequentialGroup()
                        .addGroup(LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(LeftPanelLayout.createSequentialGroup()
                                .addGroup(LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(errorDynamicLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(LeftPanelLayout.createSequentialGroup()
                                        .addGroup(LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(LeftPanelLayout.createSequentialGroup()
                                                .addComponent(matchesStaticLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(matchesDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(LeftPanelLayout.createSequentialGroup()
                                                .addComponent(PickUserButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(currentUserStaticLabel)))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(LeftPanelLayout.createSequentialGroup()
                                .addGap(183, 183, 183)
                                .addComponent(currentUserDynamicLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(LogoutButton))
                    .addGroup(LeftPanelLayout.createSequentialGroup()
                        .addGroup(LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(buyPremiumButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(getMessagesButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sendMessageButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sendMessageTextField)
                            .addGroup(LeftPanelLayout.createSequentialGroup()
                                .addComponent(cancelPremiumButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(LeftPanelLayout.createSequentialGroup()
                        .addComponent(getImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deleteImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(uploadImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        LeftPanelLayout.setVerticalGroup(
            LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LeftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PickUserButton)
                    .addComponent(currentUserStaticLabel)
                    .addComponent(LogoutButton)
                    .addComponent(currentUserDynamicLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(matchesStaticLabel)
                    .addComponent(matchesDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(getMessagesButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendMessageButton)
                    .addComponent(sendMessageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buyPremiumButton)
                    .addComponent(cancelPremiumButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addPaymentInfoButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(LeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getImageButton)
                    .addComponent(uploadImageButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteImageButton)
                .addGap(481, 481, 481)
                .addComponent(errorDynamicLabel)
                .addContainerGap())
        );

        RightPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        RightPanel.setPreferredSize(new java.awt.Dimension(489, 744));

        RightScroll.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        RightText.setEditable(false);
        RightScroll.setViewportView(RightText);

        javax.swing.GroupLayout RightPanelLayout = new javax.swing.GroupLayout(RightPanel);
        RightPanel.setLayout(RightPanelLayout);
        RightPanelLayout.setHorizontalGroup(
            RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(RightScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        RightPanelLayout.setVerticalGroup(
            RightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(RightScroll)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LeftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(RightPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(RightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 919, Short.MAX_VALUE)
                    .addComponent(LeftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 919, Short.MAX_VALUE))
                .addContainerGap())
        );

        LeftPanel.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PickUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PickUserButtonActionPerformed
        String userEmail = JOptionPane.showInputDialog("Please enter a user email");
        if (userEmail == null) {
            return;
        }
        LogInManager logInManager = LogInManager.getInstance();
        logInManager.login(userEmail);
        if (logInManager.isLoggedOn()) {
        } else {
            int createNew = JOptionPane.showConfirmDialog(null, "This user doesn't exist. Do you want to create an account for this user?");
            if (createNew == JOptionPane.YES_OPTION) {
                String userName = JOptionPane.showInputDialog("Please enter a name for this user.");
                Object[] perpos = {"1", "2", "3", "4"};
                String personality = (String)JOptionPane.showInputDialog(null,null,"Please choose a personality type.",JOptionPane.PLAIN_MESSAGE,null,perpos,"1");
                Object[] genpos = {"MALE", "FEMALE"};
                String gender = (String)JOptionPane.showInputDialog(null,null,"Please choose a gender.",JOptionPane.PLAIN_MESSAGE,null,genpos,"MALE");
                if (personality != null && userName != null && gender != null) {
                    int pid = Integer.parseInt(personality);
                    logInManager.signUp(userEmail, userName, gender, pid);
                }
            }
        }
    }//GEN-LAST:event_PickUserButtonActionPerformed

    private void LogoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutButtonActionPerformed
        LogInManager logInManager = LogInManager.getInstance();
        if (logInManager.isLoggedOn()) {
            logInManager.logout();
        } else {
            UIUpdater.error("Not logged in.");
        }
    }//GEN-LAST:event_LogoutButtonActionPerformed

    private void getMessagesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getMessagesButtonActionPerformed
        LogInManager logInManager = LogInManager.getInstance();
        UserManager userManager = UserManager.getInstance();
        if (logInManager.isLoggedOn()) {
            if (matchesDropdown.getSelectedItem() != null) {
                String otherUser = (String)matchesDropdown.getSelectedItem();
                userManager.getMessage(otherUser);
            } else {
                UIUpdater.error("No user selected.");
            }
        } else {
            UIUpdater.error("Not logged in.");
        }
    }//GEN-LAST:event_getMessagesButtonActionPerformed

    private void sendMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMessageButtonActionPerformed
        LogInManager logInManager = LogInManager.getInstance();
        UserManager userManager = UserManager.getInstance();
        if (logInManager.isLoggedOn()) {
            if (matchesDropdown.getSelectedItem() != null) {
                String otherUser = (String) matchesDropdown.getSelectedItem();
                String message = sendMessageTextField.getText();
                userManager.sendMessage(otherUser, message);
            } else {
                UIUpdater.error("No user selected.");
            }
        } else {
            UIUpdater.error("Not logged in.");
        }
    }//GEN-LAST:event_sendMessageButtonActionPerformed

    private Object[] appendValue(Object[] obj, Object newObj) {
	ArrayList<Object> temp = new ArrayList<Object>(Arrays.asList(obj));
	temp.add(newObj);
	return temp.toArray();
  }
    
    private void buyPremiumButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyPremiumButtonActionPerformed
        LogInManager logInManager = LogInManager.getInstance();
        UserManager userManager = UserManager.getInstance();
        Viewer viewer = Viewer.getInstance();
        if (logInManager.isLoggedOn()) {
            List<PremiumPackage> pos = new ArrayList<PremiumPackage>();
            try {
                pos = viewer.viewPrem();
            } catch (Exception e) {
                UIUpdater.error(e.getMessage());
                return;
            }
            Object[] possibilities = {};
            for (PremiumPackage p : pos) {
                possibilities = appendValue(possibilities, p.getpName());
            }
            String premium = (String)JOptionPane.showInputDialog(null,null,"Please choose a premium package to buy.",JOptionPane.PLAIN_MESSAGE,null,possibilities,pos.get(0).getpName());
            if (premium != null) {
                userManager.buyPrem(premium);
            }
        } else {
            UIUpdater.error("Not logged in.");
        }
    }//GEN-LAST:event_buyPremiumButtonActionPerformed

    private void cancelPremiumButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelPremiumButtonActionPerformed
        LogInManager logInManager = LogInManager.getInstance();
        UserManager userManager = UserManager.getInstance();
        if (logInManager.isLoggedOn()) {
            List<PremiumPackage> pos = new ArrayList<PremiumPackage>();
            try {
                pos = userManager.myPremiums();
            } catch (Exception e) {
                UIUpdater.error(e.getMessage());
                return;
            }
            Object[] possibilities = {};
            for (PremiumPackage p : pos) {
                possibilities = appendValue(possibilities, p.getpName());
            }
            String premium = (String)JOptionPane.showInputDialog(null,null,"Please choose a premium package to cancel.",JOptionPane.PLAIN_MESSAGE,null,possibilities,pos.get(0).getpName());
            if (premium != null) {
                userManager.cancelPrem(premium);
            }
        } else {
            UIUpdater.error("Not logged in.");
        }
    }//GEN-LAST:event_cancelPremiumButtonActionPerformed

    private void addPaymentInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPaymentInfoButtonActionPerformed
        UserManager userManager = UserManager.getInstance();
        String cardType = JOptionPane.showInputDialog("Please enter a card type for this user.");
        String cardNo = JOptionPane.showInputDialog("Please enter a card number for this user.");
        String cardAddress = JOptionPane.showInputDialog("Please enter an address for this user.");
        if (cardType != null && cardNo != null && cardAddress != null) {
            userManager.addPaymentInfo(cardType, cardNo, cardAddress);
        }
    }//GEN-LAST:event_addPaymentInfoButtonActionPerformed

    private void getImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getImageButtonActionPerformed
        LogInManager logInManager = LogInManager.getInstance();
        UserManager userManager = UserManager.getInstance();
        if (logInManager.isLoggedOn()) {
            userManager.viewImage();
        } else {
            UIUpdater.error("Not logged in.");
        }
    }//GEN-LAST:event_getImageButtonActionPerformed

    private void uploadImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadImageButtonActionPerformed
        LogInManager logInManager = LogInManager.getInstance();
        UserManager userManager = UserManager.getInstance();
        if (logInManager.isLoggedOn()) {
            String imageURL = JOptionPane.showInputDialog("Please enter an image URL this user.");
            if (imageURL != null) {
                userManager.uploadImage(imageURL);
            }
        } else {
            UIUpdater.error("Not logged in.");
        }
    }//GEN-LAST:event_uploadImageButtonActionPerformed

    private void deleteImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteImageButtonActionPerformed
        LogInManager logInManager = LogInManager.getInstance();
        UserManager userManager = UserManager.getInstance();
        if (logInManager.isLoggedOn()) {
            ArrayList<String> pos = userManager.getImage();
            Object[] possibilities = {};
            for (String p : pos) {
                possibilities = appendValue(possibilities, p);
            }
            String imageURL = (String)JOptionPane.showInputDialog(null,null,"Please choose an image to delete.",JOptionPane.PLAIN_MESSAGE,null,possibilities,pos.get(0));
            if (imageURL != null) {
                userManager.deleteImage(imageURL);
            }
        } else {
            UIUpdater.error("Not logged in.");
        }
    }//GEN-LAST:event_deleteImageButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UIFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JPanel LeftPanel;
    public javax.swing.JButton LogoutButton;
    private javax.swing.JButton PickUserButton;
    private javax.swing.JPanel RightPanel;
    private javax.swing.JScrollPane RightScroll;
    public javax.swing.JTextPane RightText;
    public javax.swing.JButton addPaymentInfoButton;
    public javax.swing.JButton buyPremiumButton;
    public javax.swing.JButton cancelPremiumButton;
    public javax.swing.JLabel currentUserDynamicLabel;
    private javax.swing.JLabel currentUserStaticLabel;
    public javax.swing.JButton deleteImageButton;
    public javax.swing.JLabel errorDynamicLabel;
    public javax.swing.JButton getImageButton;
    public javax.swing.JButton getMessagesButton;
    public javax.swing.JComboBox<String> matchesDropdown;
    private javax.swing.JLabel matchesStaticLabel;
    public javax.swing.JButton sendMessageButton;
    public javax.swing.JTextField sendMessageTextField;
    public javax.swing.JButton uploadImageButton;
    // End of variables declaration//GEN-END:variables
}
